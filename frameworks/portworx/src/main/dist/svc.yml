name: {{FRAMEWORK_NAME}}
scheduler:
  principal: {{FRAMEWORK_PRINCIPAL}}
pods:
  portworx:
    user: {{SERVICE_USER}}
    count: {{NODE_COUNT}}
    resource-sets:
      px-resources:
        cpus: 0.3
        memory: 512
        # Allocate a minimum sized local volume to the tasks so that they are pinned to a node
        volume:
          path: temp
          size: 1
          type: ROOT
    placement: {{NODE_PLACEMENT}}
    tasks:
      install:
        goal: FINISHED
        resource-set: px-resources
        cmd: >

                {{#LIGHTHOUSE_ENABLED}}
                if ! [ -x "$(command -v curl)" ]; then
                    echo 'Error: curl is not installed.' >&2
                    exit 1
                fi

                authkey=$(echo -n {{{LIGHTHOUSE_ADMIN_EMAIL}}}:{{{LIGHTHOUSE_ADMIN_PASSWORD}}} | base64)

                if [ $POD_INSTANCE_INDEX -eq "0" ]; then
                    token=$(LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/lib64 curl -X POST \
                        -H "Accept:application/json" -H "Authorization:Basic $authkey" \
                        http://lighthouse-0-start.${FRAMEWORK_HOST}:{{LIGHTHOUSE_WEBUI_PORT}}/api/clusters/create/\?name\={{PORTWORX_CLUSTER_NAME}}\&clusterid\={{PORTWORX_CLUSTER_NAME}});
                fi

                PWX_TOKEN=$(LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/lib64 curl \
                        -H "Accept:application/json" -H "Authorization:Basic $authkey" \
                        http://lighthouse-0-start.${FRAMEWORK_HOST}:{{LIGHTHOUSE_WEBUI_PORT}}/api/token/{{PORTWORX_CLUSTER_NAME}});

                if [ -z "$PWX_TOKEN" ]; then
                    echo 'Error getting PWX token from lighthouse.' >&2
                    exit 1
                fi
                {{/LIGHTHOUSE_ENABLED}}

                coreos=$(uname -a | grep coreos)

                if [ -z "$coreos" ];then
                    USR_SRC_MOUNT="-v /usr/src:/usr/src"
                fi

                docker run --entrypoint /runc-entry-point.sh \
                   --rm -i --privileged=true \
                   -v /opt/pwx:/opt/pwx -v /etc/pwx:/etc/pwx \
                   {{{PORTWORX_IMAGE_NAME}}} --debug --upgrade

                echo "[Unit]
                    Description=Portworx Container
                    Before=docker.service
                    StartLimitIntervalSec=3600
                    StartLimitInterval=3600
                    StartLimitBurst=10000
                    [Service]
                    StartLimitBurst=10000
                    TimeoutStartSec=0
                    Restart=always
                    ExecStartPre=`which ping` -c 1 master.mesos
                    ExecStartPre=-/opt/pwx/bin/runc delete -f %n
                    ExecStart=/opt/pwx/bin/px-runc run \
                          -v /run/docker/plugins:/run/docker/plugins     \
                          $USR_SRC_MOUNT                                 \
                          {{#NODE_CONTAINER_PARAMETERS}}
                          {{{NODE_CONTAINER_PARAMETERS}}}                  \
                          {{/NODE_CONTAINER_PARAMETERS}}
                          {{#LIGHTHOUSE_ENABLED}}
                          -e API_SERVER=http://lighthouse-0-start.${FRAMEWORK_HOST}:{{LIGHTHOUSE_WEBUI_PORT}} \
                          {{/LIGHTHOUSE_ENABLED}}
                          -name=%n \
                          -c {{PORTWORX_CLUSTER_NAME}} {{{PORTWORX_OPTIONS}}} \
                          {{#LIGHTHOUSE_ENABLED}}
                          -t $PWX_TOKEN
                          {{/LIGHTHOUSE_ENABLED}}
                          {{^LIGHTHOUSE_ENABLED}}
                          -k {{PORTWORX_KVDB}}
                          {{/LIGHTHOUSE_ENABLED}}
                    KillMode=control-group
                    ExecStop=/opt/pwx/bin/runc kill %n
                    [Install]
                    WantedBy=multi-user.target" > /etc/systemd/system/portworx.service &&
                ln -sf /etc/systemd/system/portworx.service /etc/systemd/system/dcos.target.wants/portworx.service &&
                systemctl daemon-reload &&
                systemctl enable portworx && 
                systemctl start portworx

      upgrade:
        goal: FINISHED
        resource-set: px-resources
        cmd: >
             docker pull {{{PORTWORX_IMAGE_NAME}}} &&
             systemctl stop portworx &&
             docker run --entrypoint /runc-entry-point.sh \
                --rm -i --privileged=true \
                -v /opt/pwx:/opt/pwx -v /etc/pwx:/etc/pwx \
                {{{PORTWORX_IMAGE_NAME}}} --debug --upgrade &&
             systemctl daemon-reload && systemctl restart portworx &&
             while ! /opt/pwx/bin/pxctl -j status | grep status | grep STATUS_OK; do /opt/pwx/bin/pxctl status; sleep 5 ; done

  etcd-cluster:
    user: {{SERVICE_USER}}
    count: 3
    image: {{ETCD_IMAGE}}
    placement: {{ETCD_PLACEMENT}}
    uris:
      - {{BOOTSTRAP_URI}}
    tasks:
      node:
        goal: RUNNING
        memory: {{ETCD_MEM}}
        cpus: {{ETCD_CPUS}}
        # etcd doesn't like space before flags, so need to put this all on one line
        cmd: >
             ${MESOS_SANDBOX}/bootstrap && /work/bin/etcd --name etcd${POD_INSTANCE_INDEX} --advertise-client-urls http://etcd-cluster-${POD_INSTANCE_INDEX}-node.${FRAMEWORK_HOST}:{{ETCD_NODE_ADVERTISE_PORT}} --listen-client-urls http://0.0.0.0:{{ETCD_NODE_ADVERTISE_PORT}} --initial-advertise-peer-urls http://etcd-cluster-${POD_INSTANCE_INDEX}-node.${FRAMEWORK_HOST}:{{ETCD_NODE_PEER_PORT}} --listen-peer-urls http://0.0.0.0:{{ETCD_NODE_PEER_PORT}} --initial-cluster-token etcd-cluster-${FRAMEWORK_NAME} --initial-cluster etcd0=http://etcd-cluster-0-node.${FRAMEWORK_HOST}:{{ETCD_NODE_PEER_PORT}},etcd1=http://etcd-cluster-1-node.${FRAMEWORK_HOST}:{{ETCD_NODE_PEER_PORT}},etcd2=http://etcd-cluster-2-node.${FRAMEWORK_HOST}:{{ETCD_NODE_PEER_PORT}} --initial-cluster-state new --data-dir $MESOS_SANDBOX/etcd-data
        volume:
          path: "etcd-data"
          type: {{ETCD_DISK_TYPE}}
          size: {{ETCD_DISK_SIZE}}
        ports:
          node-advertise:
            port: {{ETCD_NODE_ADVERTISE_PORT}}
          peer:
            port: {{ETCD_NODE_PEER_PORT}}
        readiness-check:
          cmd: /work/bin/etcdctl --endpoint http://etcd-cluster-${POD_INSTANCE_INDEX}-node.${FRAMEWORK_HOST}:{{ETCD_NODE_ADVERTISE_PORT}} cluster-health
          interval: 5
          delay: 0
          timeout: 60
    
  etcd-proxy:
    user: {{SERVICE_USER}}
    count: 1
    image: {{ETCD_IMAGE}}
    tasks:
      start:
        goal: RUNNING
        memory: 512
        cpus: 0.3
        cmd: /work/bin/etcd --proxy=on --initial-cluster etcd0=http://etcd-cluster-0-node.${FRAMEWORK_HOST}:{{ETCD_NODE_PEER_PORT}},etcd1=http://etcd-cluster-1-node.${FRAMEWORK_HOST}:{{ETCD_NODE_PEER_PORT}},etcd2=http://etcd-cluster-2-node.${FRAMEWORK_HOST}:{{ETCD_NODE_PEER_PORT}} --listen-client-urls http://0.0.0.0:{{ETCD_PROXY_ADVERTISE_PORT}}
        ports:
          proxy-advertise:
            port: {{ETCD_PROXY_ADVERTISE_PORT}}
        readiness-check:
          cmd: /work/bin/etcdctl cluster-health
          interval: 5
          delay: 0
          timeout: 60
  influxdb:
    user: {{SERVICE_USER}}
    count: 1
    image: {{INFLUXDB_IMAGE}}
    placement: {{INFLUXDB_PLACEMENT}}
    tasks:
      start:
        goal: RUNNING
        memory: {{INFLUXDB_MEM}}
        cpus: {{INFLUXDB_CPUS}}
        cmd: > 
          export INFLUXDB_META_DIR=$MESOS_SANDBOX/influxdb/meta &&
          export INFLUXDB_DATA_DIR=$MESOS_SANDBOX/influxdb/data &&
          export INFLUXDB_DATA_WAL_DIR=$MESOS_SANDBOX/influxdb/wal &&
          export INFLUXDB_HTTP_BIND_ADDRESS=:{{INFLUXDB_LISTEN_PORT}} &&
          influxd
        volume:
          path: "influxdb"
          type: {{INFLUXDB_DISK_TYPE}}
          size: {{INFLUXDB_DISK_SIZE}}
        readiness-check:
          cmd: LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/lib64 curl http://influxdb-0-start.${FRAMEWORK_HOST}:{{INFLUXDB_LISTEN_PORT}}/ping
          interval: 5
          delay: 0
          timeout: 60
  lighthouse:
    user: {{SERVICE_USER}}
    count: 1
    image: {{LIGHTHOUSE_IMAGE}}
    placement: {{LIGHTHOUSE_PLACEMENT}}
    tasks:
      start:
        goal: RUNNING
        memory: {{LIGHTHOUSE_MEM}}
        cpus: {{LIGHTHOUSE_CPUS}}
        ports:
          http:
            port: {{LIGHTHOUSE_WEBUI_PORT}}
        cmd: >
            LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu curl -X POST http://admin:password@influxdb-0-start.${FRAMEWORK_HOST}:{{INFLUXDB_LISTEN_PORT}}/query --data-urlencode "q=CREATE DATABASE px_stats" &&
            /bin/bash /lighthouse/on-prem-entrypoint.sh -d http://admin:password@influxdb-0-start.${FRAMEWORK_HOST}:{{INFLUXDB_LISTEN_PORT}}/ -k {{PORTWORX_KVDB}}
        env:
          PWX_LH_PORT: {{LIGHTHOUSE_WEBUI_PORT}}
          PWX_PX_PRECREATE_ADMIN: true
          PWX_PX_COMPANY_NAME: {{LIGHTHOUSE_COMPANY_NAME}}
          PWX_PX_ADMIN_EMAIL: {{{LIGHTHOUSE_ADMIN_EMAIL}}}
        readiness-check:
          cmd: LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu curl -X GET http://lighthouse-0-start.${FRAMEWORK_HOST}:{{LIGHTHOUSE_WEBUI_PORT}}/api/system | grep Lighthouse | grep 2
          interval: 5
          delay: 0
          timeout: 60
plans:
  deploy:
    strategy: serial
    phases:
      {{#ETCD_ENABLED}}
      etcd-cluster:
        strategy: parallel
        pod: etcd-cluster
        steps:
          - default : [[node]]
      etcd-proxy:
        strategy: serial
        pod: etcd-proxy
        steps:
          - default : [[start]]
      {{/ETCD_ENABLED}}
      {{#LIGHTHOUSE_ENABLED}}
      influxdb-deploy:
        strategy: serial
        pod: influxdb 
        steps:
          - default : [[start]]
      lighthouse-deploy:
        strategy: serial
        pod: lighthouse 
        steps:
          - default : [[start]]
      {{/LIGHTHOUSE_ENABLED}}
      portworx-deploy:
        strategy: serial
        pod: portworx
        steps:
          - default : [[install]]
  upgrade-portworx:
    strategy: serial
    phases:
      upgrade:
        strategy: serial
        pod: portworx
        steps:
          - default : [[upgrade]]
